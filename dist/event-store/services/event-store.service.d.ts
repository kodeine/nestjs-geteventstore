/// <reference types="node" />
import { OnModuleInit } from '@nestjs/common';
import { EventStoreProjection, IPersistentSubscriptionConfig } from '../../interfaces';
import { ReadEventBus } from '../../cqrs';
import { IEventStoreSubsystems } from '../config';
import { AppendResult, BaseOptions, Credentials, StreamingRead } from '@eventstore/db-client/dist/types';
import { IEventStoreService } from './event-store.service.interface';
import { EventData } from '@eventstore/db-client/dist/types/events';
import { AppendToStreamOptions, GetStreamMetadataResult, ReadStreamOptions, SetStreamMetadataOptions } from '@eventstore/db-client/dist/streams';
import { ReadableOptions } from 'stream';
import { PersistentSubscription, ResolvedEvent } from '@eventstore/db-client';
import { StreamMetadata } from '@eventstore/db-client/dist/utils/streamMetadata';
import { PersistentSubscriptionSettings } from '@eventstore/db-client/dist/utils';
import { Client } from '@eventstore/db-client/dist/Client';
import { CreateContinuousProjectionOptions, CreateOneTimeProjectionOptions, CreateTransientProjectionOptions, GetProjectionStateOptions } from '@eventstore/db-client/dist/projections';
import { DeletePersistentSubscriptionOptions } from '@eventstore/db-client/dist/persistentSubscription';
import IEventsAndMetadatasStacker from '../reliability/interface/events-and-metadatas-stacker';
import { EventStoreHealthIndicator } from '../health';
export declare class EventStoreService implements OnModuleInit, IEventStoreService {
    private readonly eventStore;
    private readonly subsystems;
    private readonly eventsStacker;
    private readonly eventStoreHealthIndicator;
    private readonly eventBus?;
    private logger;
    private persistentSubscriptions;
    private isOnError;
    private isTryingToConnect;
    private isTryingToWriteEvents;
    private isTryingToWriteMetadatas;
    constructor(eventStore: Client, subsystems: IEventStoreSubsystems, eventsStacker: IEventsAndMetadatasStacker, eventStoreHealthIndicator: EventStoreHealthIndicator, eventBus?: ReadEventBus);
    onModuleInit(): Promise<void>;
    private connect;
    private retryToConnect;
    createProjection(query: string, type: 'oneTime' | 'continuous' | 'transient', projectionName?: string, options?: CreateContinuousProjectionOptions | CreateTransientProjectionOptions | CreateOneTimeProjectionOptions): Promise<void>;
    getProjectionState<T>(streamName: string, options?: GetProjectionStateOptions): Promise<T>;
    updateProjection(projection: EventStoreProjection, content: string): Promise<void>;
    private extractProjectionContent;
    upsertProjections(projections: EventStoreProjection[]): Promise<void>;
    private upsertProjection;
    createPersistentSubscription(streamName: string, groupName: string, settings: Partial<PersistentSubscriptionSettings>, options?: BaseOptions): Promise<void>;
    updatePersistentSubscription(streamName: string, group: string, options: Partial<PersistentSubscriptionSettings>, credentials?: Credentials): Promise<void>;
    deletePersistentSubscription(streamName: string, groupName: string, options?: DeletePersistentSubscriptionOptions): Promise<void>;
    subscribeToPersistentSubscriptions(subscriptions?: IPersistentSubscriptionConfig[]): Promise<PersistentSubscription[]>;
    private upsertPersistentSubscriptions;
    private upsertPersistentSubscription;
    private static isNotAlreadyExistsError;
    private static isNotAProjectionAlreadyExistsError;
    getPersistentSubscriptions(): PersistentSubscription[];
    readMetadata(stream: string): Promise<GetStreamMetadataResult>;
    writeMetadata(streamName: string, metadata: StreamMetadata, options?: SetStreamMetadataOptions): Promise<AppendResult>;
    private tryToWriteStackedMetadatas;
    readFromStream(stream: string, options?: ReadStreamOptions, readableOptions?: ReadableOptions): Promise<StreamingRead<ResolvedEvent>>;
    writeEvents(stream: string, events: EventData[], expectedVersion?: AppendToStreamOptions): Promise<AppendResult>;
    private tryToWriteStackedEventBatches;
    private tryToWriteEventsFromBatch;
    private onEvent;
}
